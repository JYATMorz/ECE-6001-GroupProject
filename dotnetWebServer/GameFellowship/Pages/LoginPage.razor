@page "/login"

@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>登录GameFellowship</PageTitle>

<div class="h-100">
	<div class="h-25"></div>
	<div class="d-flex flex-column align-items-center gap-3">
		<h1>欢迎登录</h1>
		<h1 class="fw-bold">GameFellowship</h1>
	</div>
	<div class="mx-auto my-5">
		<form>
			<fieldset class="text-center" disabled="@userLoggingIn">
				<div class="d-inline-flex align-items-baseline gap-2">
					<label class="form-label text-nowrap text-end loginFormLabel" for="userLoginName">用户名 / 邮箱：</label>
					<input class="form-control loginFormInput @((!userNameModified || UserNameValid) ? validDivClass : invalidDivClass) @(userNameModified ? modifiedDivClass : string.Empty)"
						id="userLoginName" type="text" @bind="UserName" required>
				</div>
				<div class="loginFormError mb-3">
					<small class="form-text validation-message">Test for error notification</small>
				</div>
				<div class="d-inline-flex align-items-baseline gap-2">
					<label class="form-label text-nowrap text-end loginFormLabel" for="userLoginPassword">密码：</label>
					<input class="form-control loginFormInput @((!userPasswordModified || UserPasswordValid) ? validDivClass : invalidDivClass) @(userPasswordModified ? modifiedDivClass : string.Empty)"
						id="userLoginPassword" type="password" @bind="_userPassword" required>
				</div>
				<div class="loginFormError mb-3">
					<small class="form-text validation-message">Test for error notification</small>
				</div>
			</fieldset>
		</form>
	</div>
	<div class="d-flex flex-wrap justify-content-evenly gap-5 m-5">
		<button class="btn btn-outline-info btn-lg px-4 py-3"
			@onclick="OnUserRegister">立刻注册</button>
		<button class="btn btn-primary btn-lg px-4 py-3" @onclick="OnUserLogin"
			disabled="@(!UserNameValid || !UserPasswordValid)">登陆账号</button>
	</div>
</div>

@code {
	private string _userName = string.Empty;
	private string UserName
	{
		get => _userName;
		set
		{
			_userName = value;
			OnUserNameChange();
		}
	}
	private bool userExisted = false;
	private bool UserNameValid => !string.IsNullOrWhiteSpace(UserName) && userExisted;
	private bool userNameModified = false;

	private string _userPassword = string.Empty;
	private string UserPassword
	{
		get => _userPassword;
		set
		{
			_userPassword = value;
			if (!userPasswordModified) userPasswordModified = true;
		}
	}
	private bool UserPasswordValid => !string.IsNullOrWhiteSpace(_userPassword);
	private bool userPasswordModified = false;

	private bool userLoggingIn = false;
	private string validDivClass = "valid";
	private string invalidDivClass = "invalid";
	private string modifiedDivClass = "modified";

	private async void OnUserNameChange()
	{
		if (!userNameModified) userNameModified = true;

		userExisted = await UserService.HasUserAsync(UserName);
	}

	private async Task OnUserLogin()
	{
		userLoggingIn = true;
		bool loginSucceed = await UserService.UserLoginAsync(UserName, _userPassword);

		if (!loginSucceed)
		{
			await JS.InvokeVoidAsync("");
			userLoggingIn = false;
			return;
		}

		userLoggingIn = false;
		Navigation.NavigateTo("games", true);
	}

	private void OnUserRegister()
	{
		// TODO: Go to register page with username if it is written

		Navigation.NavigateTo("register");
	}
}
