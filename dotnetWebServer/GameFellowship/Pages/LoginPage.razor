@page "/login"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage LocalStorage

@inject ILoginService LoginService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>登录GameFellowship</PageTitle>

<div class="h-100">
	<div class="h-15"></div>
	<div class="d-flex flex-column align-items-center gap-3">
		<h1>欢迎登录</h1>
		<h1 class="fw-bold">GameFellowship</h1>
	</div>
	<div class="mx-auto my-5">
		<form>
			<fieldset class="text-center" disabled="@_userLoggingIn">
				<div class="d-inline-flex align-items-baseline gap-2">
					<label class="form-label text-nowrap text-end loginFormLabel" for="userLoginName">用户名 / 邮箱：</label>
					<input class="form-control loginFormInput @((!_userLoginNameModified || UserLoginNameValid) ? _validDivClass : _invalidDivClass) @(_userLoginNameModified ? _modifiedDivClass : string.Empty)"
						id="userLoginName" type="text" @bind="UserLoginName" required>
				</div>
				<div class="loginFormError mb-3">
					@if (_userLoginNameModified && !UserLoginNameValid)
					{
						<small class="form-text validation-message">用户名不存在</small>
					}
				</div>
				<div class="d-inline-flex align-items-baseline gap-2">
					<label class="form-label text-nowrap text-end loginFormLabel" for="userLoginPassword">密码：</label>
					<input class="form-control loginFormInput @((!_userPasswordModified || UserPasswordValid) ? _validDivClass : _invalidDivClass) @(_userPasswordModified ? _modifiedDivClass : string.Empty)"
						id="userLoginPassword" type="password" @bind="UserPassword" required>
				</div>
				<div class="loginFormError mb-3">
					@if (_userPasswordModified && !UserPasswordValid)
					{
						<small class="form-text validation-message">你这密码为什么是空的啊</small>
					}
				</div>
			</fieldset>
		</form>
	</div>
	<div class="d-flex flex-wrap justify-content-evenly gap-5 m-5">
		<button class="btn btn-outline-info btn-lg px-4 py-3"
			@onclick="OnUserRegister">立刻注册</button>
		<button class="btn btn-primary btn-lg px-4 py-3" @onclick="OnUserLogin"
			disabled="@(!UserLoginNameValid || !UserPasswordValid)">登陆账号</button>
	</div>
</div>

@code {
	private string _userLoginName = string.Empty;
	private string UserLoginName
	{
		get => _userLoginName;
		set
		{
			_userLoginName = value;
			OnUserNameChange();
		}
	}
	private bool _userExisted = false;
	private bool UserLoginNameValid => !string.IsNullOrWhiteSpace(UserLoginName) && _userExisted;
	private bool _userLoginNameModified = false;

	private string _userPassword = string.Empty;
	private string UserPassword
	{
		get => _userPassword;
		set
		{
			_userPassword = value;
			if (!_userPasswordModified) _userPasswordModified = true;
		}
	}
	private bool UserPasswordValid => !string.IsNullOrWhiteSpace(_userPassword);
	private bool _userPasswordModified = false;

	private bool _userLoggingIn = false;
	private string _validDivClass = "valid";
	private string _invalidDivClass = "invalid";
	private string _modifiedDivClass = "modified";

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		_userLoginNameModified = false;
		_userPasswordModified = false;
		_userLoggingIn = false;
	}

	private async void OnUserNameChange()
	{
		if (!_userLoginNameModified) _userLoginNameModified = true;

		_userExisted = await UserService.HasUserAsync(UserLoginName)
			|| await UserService.HasEmailAsync(UserLoginName);
	}

	private async Task OnUserLogin()
	{
		_userLoggingIn = true;

		(bool loginSucceed, string userLoginInfo) = await LoginService.UserLoginAsync(UserLoginName, UserPassword);

		if (!loginSucceed)
		{
			await JS.InvokeVoidAsync("userLoginFailAlert");
			_userLoggingIn = false;
			return;
		}
		await LocalStorage.SetAsync(LoginService.LocalStorageKey, userLoginInfo);

		_userLoggingIn = false;
		Navigation.NavigateTo("games", true);
	}

	private void OnUserRegister()
	{
		if (!string.IsNullOrWhiteSpace(UserLoginName) && !_userExisted)
		{
			Navigation.NavigateTo("register?name=" + UserLoginName);
		}
		else
		{
			Navigation.NavigateTo("register");
		}
	}
}
