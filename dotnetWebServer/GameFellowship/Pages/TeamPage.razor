@page "/teams/{GameName}"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage LocalStorage

@inject ILoginService LoginService
@inject IPostService PostService
@inject IGameService GameService

<PageTitle>在@(GameName)找个队</PageTitle>

<div class="d-flex flex-column h-100">
    <!-- Game Icon & Info -->
    <div class="p-3 m-2 d-flex rounded-3 bg-dark-subtle">
        @if (_game is null)
        {
            <LoadingSpinner />
            <p>正在获得游戏详细信息 ...</p>
        }
        else
        {
            <img src="@_game.Value.IconUri" alt="GameIcon" width="100" height="100" class="rounded-5">
            <div class="mx-3 my-1 flex-grow-1">
                <div style="font-size: xx-large; font-weight: bold;">@_game.Value.Name</div>
                <small class="text-body-secondary">@_game.Value.Followers 订阅</small>
            </div>
            <!-- Start a New Post -->
            <div class="btn-group mt-auto mb-2 mx-1 text-nowrap" role="group" aria-label="New Post Button">
                <button type="button" class="btn btn-success" data-bs-toggle="modal"
                        data-bs-target="#teamCreateModal" disabled="@(!_userHasLogin)">
                    新组队
                </button>
            </div>
        }
    </div>
    <hr>
    <div class="flex-grow-1 flex-nowrap overflow-y-auto overflow-x-hidden">
        <!-- Team Finding Cards for games -->
        <div class="row row-cols-auto g-3 m-0">
            @if (_posts is null)
            {
                <LoadingSpinner />
            }
            else
            {
                @if (!_posts.Any())
                {
                    <div class="container-fluid m-auto d-flex align-items-center" style="height: 200px;">
                        <p>目前没有人在 @GameName 寻找组队 ...</p>
                    </div>
                }
                else
                {
                    @foreach (var post in _posts)
                    {
                        <TeamCard Post="@post" OnDetailCallback="@(() => ShowTeamDetail(post))" />
                    }
                }
            }
        </div>
    </div>
</div>

<NewPostModal GameName="@GameName" />
<PostDetailModal Post="@_selectedPost" />

@code {
    [Parameter]
    public string GameName { get; set; } = string.Empty;

    private bool _userHasLogin = false;

    private PostDto? _selectedPost = null;
    private PostDto[]? _posts;
    private GameDto? _game;

    protected override async Task OnParametersSetAsync()
    {
        _posts = await PostService.GetPostsAsync(GameName);
        _game = await GameService.GetGameAsync(GameName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var userLoginResult = await LocalStorage.GetAsync<string>(LoginService.LocalStorageKey);
        if (!userLoginResult.Success)
        {
            _userHasLogin = false;
            return;
        }

        (_userHasLogin, int _) = await LoginService.UserHasLoginAsync(userLoginResult.Value);

        StateHasChanged();
    }

    private void ShowTeamDetail(PostDto post)
    {
        _selectedPost = post;
    }
}





