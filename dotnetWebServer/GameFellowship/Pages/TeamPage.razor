@page "/teams/{GameName}"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage LocalStorage

@inject ILoginService LoginService
@inject IPostService PostService
@inject IUserService UserService
@inject IGameService GameService

<PageTitle>在@(GameName)找个队</PageTitle>

<div class="d-flex flex-column h-100">
    <!-- Game Icon & Info -->
    <div class="p-3 m-2 d-flex rounded-3 bg-dark-subtle">
        @if (_game is null)
        {
            <LoadingSpinner />
            <p>正在获得游戏详细信息 ...</p>
        }
        else
        {
            <img src="@_game.Value.IconUri" alt="GameIcon" width="100" height="100" class="rounded-5">
            <div class="mx-3 my-1 flex-grow-1">
                <div style="font-size: xx-large; font-weight: bold;">@_game.Value.Name</div>
                <small class="text-body-secondary">@_game.Value.Followers 订阅</small>
            </div>
            <!-- Start a New Post -->
            <div class="m-1 text-nowrap d-flex flex-column align-content-between gap-3">
                <button type="button" class="btn @FollowCss" @onclick="OnUserFollowGame">
                    @Follow
                </button>
                <button type="button" class="btn btn-success" data-bs-toggle="modal"
                        data-bs-target="#teamCreateModal" disabled="@(!_userHasLogin)">
                    新组队
                </button>
            </div>
        }
    </div>
    <hr>
    <div class="flex-grow-1 flex-nowrap overflow-y-auto overflow-x-hidden">
        <!-- Team Finding Cards for games -->
        <div class="row row-cols-auto g-3 m-0">
            @if (_posts is null)
            {
                <LoadingSpinner />
            }
            else
            {
                @if (!_posts.Any())
                {
                    <div class="container-fluid m-auto d-flex align-items-center" style="height: 200px;">
                        <p>目前没有人在 @GameName 寻找组队 ...</p>
                    </div>
                }
                else
                {
                    @foreach (var post in _posts)
                    {
                        <TeamCard Post="@post" OnDetailCallback="@(() => ShowTeamDetail(post))" />
                    }
                }
            }
        </div>
    </div>
</div>

<NewPostModal GameName="@GameName" />
<PostDetailModal Post="@_selectedPost" />

@code {
    [Parameter]
    public string GameName { get; set; } = string.Empty;

    private bool _userHasLogin = false;

    private PostDto? _selectedPost = null;
    private PostDto[]? _posts;
    private GameDto? _game;

    private bool _userHasFollowed = false;
    private string Follow => _userHasFollowed ? "已关注" : "关注游戏";
    private string FollowCss => _userHasFollowed ? "btn-outline-secondary" : "btn-primary";

    protected override async Task OnParametersSetAsync()
    {
        _posts = await PostService.GetPostsAsync(GameName);
        _game = await GameService.GetGameAsync(GameName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        (_userHasLogin, int userId) = await CheckUserLoginAsync();

        if (_userHasLogin && _game is not null)
        {
            _userHasFollowed = await UserService.HasGameFollowed(userId, _game.Value.Name);
        }

        StateHasChanged();
    }

    private void ShowTeamDetail(PostDto post)
    {
        _selectedPost = post;
    }

    private async void OnUserFollowGame()
    {
        if (_game is null) return;

        (_userHasLogin, int userId) = await CheckUserLoginAsync();

        if (_userHasFollowed)
        {
            _userHasFollowed = !(await UserService.DeleteFollowedGameAsync(userId, _game.Value.Name));
        }
        else
        {
            _userHasFollowed = await UserService.AddFollowedGameAsync(userId, _game.Value.Name);
        }

        _game = await GameService.GetGameAsync(_game.Value.Name);

        StateHasChanged();
    }

    private async Task<(bool, int)> CheckUserLoginAsync()
    {
        var userLoginResult = await LocalStorage.GetAsync<string>(LoginService.LocalStorageKey);
        if (!userLoginResult.Success)
        {
            return (false, -1);
        }

        (bool userHasLogin, int userId) = await LoginService.UserHasLoginAsync(userLoginResult.Value);
        if (!userHasLogin)
        {
            return (false, -1);
        }

        return (true, userId);
    }
}





