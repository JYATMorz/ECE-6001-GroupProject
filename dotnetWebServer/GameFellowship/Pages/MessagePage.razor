@page "/messages"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage LocalStorage

@inject IUserService UserService
@inject IPostService PostService
@inject ILoginService LoginService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>你的消息</PageTitle>

<div class="d-flex">
    <!-- vertical message navbar -->
	<div class="overflow-x-hidden overflow-y-scroll pe-0 vh-100">
        <div class="list-group p-1" style="min-width:150px">
            @if (!_hasPost)
            {
                <div class="text-info">您还没有参加过组队，不试一试嘛❤</div>
            }
            else if (_myPosts is null)
            {
                <LoadingSpinner />
            }
            else
            {
                @foreach (var post in _myPosts)
                {
                    <MessageNavbar Post="@post" SelectedPostId="@_selectedPostId"
                        SelectedPostIdChange="@OnSelectedPostChange" />
                }
            }
        </div>
    </div>
    <!-- message tabs -->
    <div class="flex-grow-1 vh-100 ps-2 pe-1">
        @if (_selectedPost is null)
        {
            <div class="d-flex align-items-center justify-content-center text-center h-100">
				<p class="fs-3">选择任意对话开始浏览</p>
            </div>
        }
        else
        {
            <MessageDetail Post="@_selectedPost" />
        }
    </div>
</div>

@code {
    private bool _hasPost = true;

    private IEnumerable<PostTemp>? _myPosts;
    private int _selectedPostId = -1;
    private PostTemp? _selectedPost;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var userLoginResult = await LocalStorage.GetAsync<int>(LoginService.LocalStorageKey);
        bool userHasLogin = userLoginResult.Success && await LoginService.UserHasLoginAsync(userLoginResult.Value);

        if (!userHasLogin)
        {
            _hasPost = false;
            return;
        }
        int userId = userLoginResult.Value;

        IEnumerable<int>? myPostIDs = await UserService.GetUserJoinedPostIdsAsync(userId);
        if (myPostIDs is null || !myPostIDs.Any())
        {
            _hasPost = false;
            return;
        }

        _myPosts = await PostService.GetPostsAsync(myPostIDs);

        StateHasChanged();
    }

    private void OnSelectedPostChange(int selectedPostId)
    {
        _selectedPostId = selectedPostId;

        if (_selectedPostId <= 0)
        {
            _selectedPost = null;
            return;
        }

        var resultPost =
            from post in _myPosts
            where post.PostID == _selectedPostId
            select post;

        if(resultPost.Any())
        {
            _selectedPost = resultPost.First();
        }
        else
        {
            _selectedPost = null;
        }
    }
}