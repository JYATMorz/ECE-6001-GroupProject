@foreach (var require in Requirements)
{
    <div class="d-inline-flex border border-3 border-dark-subtle rounded-5">
    <input class="form-control form-control-sm rounded-start-4 text-center form-control-plaintext"
        type="text" aria-label="team requirement" disabled readonly
        value="@require" style="max-width: 6rem;">
    <div class="d-inline-flex align-items-center">
        <button type="button" class="btn btn-light btn-sm rounded-end-4" aria-label="Current Requirements"
            @onclick="()=>OnRequirementsDelete(require)">
                <i class="bi bi-x-lg pe-1"></i>
            </button>
        </div>
    </div>
}
<div class="d-inline-flex border border-3 border-dark-subtle rounded-5">
    <input class="form-control form-control-sm rounded-start-4 text-center form-control-plaintext"
        type="text" placeholder="新要求" aria-label="team requirement"
        @bind="_newRequirement" style="max-width: 6rem;">
    <div class="d-inline-flex align-items-center">
        <button type="button" class="btn btn-light btn-sm rounded-end-4" aria-label="New Requirements"
            @onclick="OnRequirementsAdd">
            <i class="bi bi-plus-lg pe-1"></i>
        </button>
    </div>
</div>

@code {
    [Parameter]
    public string[] Requirements { get; set; } = { };
    [Parameter]
    public EventCallback<string[]> RequirementsChanged { get; set; }

    private HashSet<string> _currentRequirements = new();
    private string? _newRequirement;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _currentRequirements = Requirements.ToHashSet();
    }

    private async Task OnRequirementsAdd()
    {
        if (!string.IsNullOrWhiteSpace(_newRequirement))
        {
            _currentRequirements.Add(_newRequirement);
            _newRequirement = "";
        }

        await RequirementsChanged.InvokeAsync(_currentRequirements.ToArray());
    }

    private async Task OnRequirementsDelete(string require)
    {
        _currentRequirements.Remove(require);
        await RequirementsChanged.InvokeAsync(_currentRequirements.ToArray());
    }

}
