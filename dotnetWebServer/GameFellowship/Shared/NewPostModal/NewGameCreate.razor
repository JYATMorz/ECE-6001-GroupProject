@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage LocalStorage

@inject ILoginService LoginService
@inject IGameService GameService
@inject IIconUploadService IconUpload
@inject IWebHostEnvironment Environment
@inject IJSRuntime JS

<div class="m-2 p-3 border rounded-3 border-dark-subtle">
    @if (!_userHasLogin)
    {
        <div class="validation-message">请先登录</div>
    }
    else if (_creatingGame)
    {
        <LoadingSpinner />
    }
    else if (!string.IsNullOrWhiteSpace(GameName))
    {
        <div><span class="fw-bold pe-1">@GameName</span>暂时未被收录，不成为创建者🐎</div>
        <hr>
        <div class="d-flex align-items-stretch gap-3 mt-2">
            <label class="form-label text-nowrap my-auto" for="IconUpload">给<span class="fw-bold px-1">@GameName</span>上传一个图标吧</label>
            <InputFile class="form-control" id="IconUpload" accept="image/png, image/jpeg"
                OnChange="@OnIconFileUploaded"/>
        </div>
        @if (_iconUploading)
        {
            <div>上传中 ...</div>
        }
        else if (!_uploadSuccess && _uploadOnce)
        {
            <div class="validation-message">上传失败，再上传一遍试试吧</div>
        }
        else if (_uploadOnce && !string.IsNullOrWhiteSpace(_newGame.IconURI))
        {
            <div class="text-success">上传完成</div>
        }
        <hr>
        <div class="d-flex justify-content-end align-items-stretch gap-3 mt-3">
            <div class="me-auto">
                @if (!string.IsNullOrWhiteSpace(_newGame.IconURI))
                {
                    <img src="@_newGame.IconURI" alt="上传图标" height="100" />
                }
            </div>
            <div class="form-check my-auto">
                <input class="form-check-input" id="followCheck" type="checkbox" @bind="_newGame.Follow">
                <label class="form-check-label" for="followCheck">成为第1个关注者</label>
            </div>
            <button class="btn btn-primary my-auto" type="button"
                @onclick="OnNewGameCreateAsync">创建游戏</button>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public string GameName { get; set; } = string.Empty;
    [Parameter]
    public bool ExistedGame {get;set;} = false;
    [Parameter]
    public EventCallback<bool> ExistedGameChanged { get; set; }

    private GameModel _newGame = default!;

    private bool _userHasLogin = false;

    private bool _uploadOnce = false;
    private bool _uploadSuccess = false;
    private bool _iconUploading = false;
    private bool _creatingGame = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _newGame = new GameModel(GameName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        (_userHasLogin, int _) = await CheckUserLoginAsync();

        if (_userHasLogin) StateHasChanged();
    }

    private async Task OnIconFileUploaded(InputFileChangeEventArgs e)
    {
        _iconUploading = true;
        if (!_uploadOnce) _uploadOnce = true;

        (_uploadSuccess, string message) = await IconUpload.IconUploadToJpg(e, Environment, IGameService.DefaultGameIconFolder, GameName);

        _iconUploading = false;

        _newGame.IconURI = _uploadSuccess ? message : IGameService.DefaultGameIconUri;
    }

    private async void OnNewGameCreateAsync()
    {
        _creatingGame = true;

        (bool userLogin, int userId) = await CheckUserLoginAsync();
        if (!userLogin)
        {
            _creatingGame = false;
            await JS.InvokeVoidAsync("createGameAlert");

            _userHasLogin = userLogin;
            return;
        }

        if (!_uploadOnce || !_uploadSuccess)
        {
            _newGame.IconURI = IGameService.DefaultGameIconUri;
        }
        bool createSuccess = await GameService.CreateNewGameAsync(_newGame, userId);

        if (!createSuccess)
        {
            _creatingGame = false;
            await JS.InvokeVoidAsync("createGameAlert");
            return;
        }

        // TODO: Use css to gradually close the div
        await Task.Delay(1000);

        await ExistedGameChanged.InvokeAsync(true);
        _creatingGame = false;
    }

    private async Task<(bool, int)> CheckUserLoginAsync()
    {
        var userLoginResult = await LocalStorage.GetAsync<string>(LoginService.LocalStorageKey);
        if (!userLoginResult.Success)
        {
            return (false, -1);
        }

        (bool userHasLogin, int userId) = await LoginService.UserHasLoginAsync(userLoginResult.Value);
        if (!userHasLogin)
        {
            return (false, -1);
        }

        return (true, userId);
    }
}