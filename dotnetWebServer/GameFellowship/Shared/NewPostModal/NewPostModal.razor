@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage LocalStorage

@inject ILoginService LoginService
@inject IUserService UserService
@inject IGameService GameService
@inject IPostService PostService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="modal fade" id="teamCreateModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="teamCreateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-2 me-2" id="teamCreateModalLabel">编辑新帖子</h1>
                <small class="fst-italic text-muted p-1 align-self-end">寻找您的队伍 !</small>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm id="newPostForm" EditContext="@_editContext" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <!-- Game Name -->
                <div>
                    <label class="fs-4 fw-bold mb-1" for="postGameName">
                        游戏名<i class="bi bi-joystick mx-2"></i>
                    </label>
					<GameNameInput id="postGameName" class="form-control w-50" list="gameNameOptions"
                        placeholder="输入或搜索 ..." @bind-Value="_newPost.GameName" @onfocusout="OnGameNameFocusAsync"/>
                    <ValidationMessage For="() => _newPost.GameName" />
                    <datalist id="gameNameOptions">
                        @if (_newPost.GameNameList is not null)
                        {
                            <DataListOptions DataList="@_newPost.GameNameList" />
                        }
                    </datalist>
                    @if (!_existedGame && !_editContext!.GetValidationMessages(()=>_newPost.GameName).Any())
                    {
                        <NewGameCreate GameName="@_newPost.GameName" @bind-ExistedGame="_existedGame" />
                    }
                </div>
                <!-- Match Type -->
                <div class="mt-2">
                    <label class="fs-4 fw-bold mb-1" for="postMatchType">
                        游戏类型<i class="bi bi-boxes mx-2"></i>
                    </label>
					<InputText id="postMatchType" class="form-control w-50" list="matchTypeOptions"
		                placeholder="输入或搜索 ..." @bind-Value="_newPost.MatchType" />
                    <ValidationMessage For="() => _newPost.MatchType" />
                    <datalist id="matchTypeOptions">
                        @if (_newPost.MatchTypeList is not null)
                        {
                            <DataListOptions DataList="@_newPost.MatchTypeList" />
                        }
                    </datalist>
                </div>
                <!-- Member's Number -->
                <div class="d-inline-flex flex-wrap mt-2 column-gap-4">
                    <div class="row">
                        <label class="col-form-label col-form-label-sm col-sm-auto fs-4 fw-bold"
                            for="postTotalPeople">需要人数: <i class="bi bi-person-fill mx-2"></i></label>
                        <div class="col-sm-auto align-self-center">
							<InputNumber id="postTotalPeople" class="form-control form-control-sm" min="0"
                                @bind-Value="_newPost.TotalPeople" />
                        </div>
                    </div>
                    <div class="vr"></div>
                    <div class="row">
                        <label class="col-form-label col-form-label-sm col-sm-auto fs-4 fw-bold"
                            for="postCurrentPeople">当前人数: <i class="bi bi-person-check-fill mx-2"></i></label>
                        <div class="col-sm-auto align-self-center">
							<InputNumber id="postCurrentPeople" class="form-control form-control-sm" min="0"
                                @bind-Value="_newPost.CurrentPeople" />
                        </div>
                    </div>
                </div>
                <div>
                    <ValidationMessage For="() => _newPost.TotalPeople" />
                    <ValidationMessage For="() => _newPost.CurrentPeople" />
                    @if (!_newPost.ValidPeople)
                    {
                        <div class="validation-message">当前人数请不要大于需求人，已经塞不下了❤</div>
                    }
                </div>
                <!-- Requirements -->
                <div class="mt-2">
                    <label class="fs-4 fw-bold mb-1" for="createRequirementAdd">条件<i
                            class="bi bi-card-checklist mx-2"></i></label>
                    <div class="d-flex gap-2">
                        <PillRequirements @bind-Requirements="_newPost.Requirements"/>
                    </div>
                    @if (_newPost.Requirements.Length > 5)
                    {
                        <div class="validation-message">队伍要求请少于等于5个捏</div>
                    }
                    @if (_newPost.Requirements.Length < 1)
                    {
                        <div class="validation-message">至少提1个队伍要求</div>
                    }
                </div>
                <!-- Game Date -->
                <div class="mt-2">
                    <div class="fs-4 fw-bold mb-1">日期<i class="bi bi-calendar-check mx-2"></i></div>
                    <div class="m-2">
                        <InputRadioGroup class="form-check form-check-inline" @bind-Value="_newPost.PlayNow" >
                            <InputRadio id="postPlaNow" class="form-check-input" Value="@true" />
                            <label class="form-check-label" for="postPlaNow">立刻马上</label>
                            <InputRadio id="postPlaLate" class="form-check-input" Value="@false" />
                            <label class="form-check-label" for="postPlaLate">下次一定</label>
                        </InputRadioGroup>
                    </div>
                    <div class="collapse @(_newPost.PlayNow ? "" : "show")">
                        <div class="d-inline-flex gap-2 p-2 border border-dark-subtle rounded-3 align-items-center">
                            <div class="row">
                                <label class="col-form-label col-form-label-sm col-sm-auto" for="postDateStart">从:</label>
                                <div class="col-sm-auto">
                                    <InputDate class="form-control form-control-sm" id="postDateStart" 
                                        @bind-Value="_newPost.StartDate"/>
                                </div>
                                <label class="col-form-label col-form-label-sm col-sm-auto" for="postTimeStart">的:</label>
                                <div class="col-sm-auto">
                                    <InputDate class="form-control form-control-sm" id="postTimeStart"
                                        Type="InputDateType.Time" @bind-Value="_newPost.StartTime" />
                                </div>
                            </div>
                            <div class="vr"></div>
                            <div class="row">
                                <label class="col-form-label col-form-label-sm col-sm-auto" for="postDateEnd">到:</label>
                                <div class="col-sm-auto">
                                    <InputDate class="form-control form-control-sm" id="postDateEnd"
                                        @bind-Value="_newPost.EndDate" />
                                </div>
                                <label class="col-form-label col-form-label-sm col-sm-auto" for="postTimeEnd">的:</label>
                                <div class="col-sm-auto">
									<InputDate class="form-control form-control-sm" id="postTimeEnd"
                                        Type="InputDateType.Time" @bind-Value="_newPost.EndTime" />
                                </div>
                            </div>
                        </div>
                        <ValidationMessage For="() => _newPost.StartDate" />
                        <ValidationMessage For="() => _newPost.EndDate" />
                        @if (!_newPost.ValidDate)
                        {
                            <div class="validation-message">起始日期请晚于结束日期</div>
                        }
                    </div>
                </div>
                <!-- Audio Chat -->
                <div class="mt-2">
                    <div class="fs-4 fw-bold mb-1">语音<i class="bi bi-mic-fill mx-2"></i></div>
                    <div class="form-check form-switch m-2">
                        <InputCheckbox class="form-check-input" id="postAudioChat" @bind-Value="_newPost.AudioChat" />
                        <label class="form-check-label" for="postAudioChat">需要语音</label>
                    </div>
                    <div class="collapse @(_newPost.AudioChat ? "show" : "")" id="audioChatCollapse">
                        <div class="p-2 border border-dark-subtle rounded-3">
                            <div class="row ps-2">
                                <label class="col-form-label col-auto" for="postAudioName">语音平台: </label>
                                <InputText class="form-control col-auto w-25" id="postAudioName" list="audioChatNames"
                                    placeholder="输入或搜索 ..." @bind-Value="_newPost.AudioPlatform" />
                                <datalist id="audioChatNames">
                                    @if (_newPost.AudioPlatformList is not null)
                                    {
                                        <DataListOptions DataList="@_newPost.AudioPlatformList" />
                                    }
                                </datalist>
                            </div>
                            <ValidationMessage For="() => _newPost.AudioPlatform" />
                            @if (!_newPost.ValidAudioPlatform)
                            {
                                <div class="validation-message ps-1">请填写语音平台名称</div>
                            }
                            <hr>
                            <div class="row ps-2">
                                <label class="col-form-label col-auto" for="postAudioLink">语音链接 : </label>
                                <InputText class="form-control col-auto w-75" id="postAudioLink"
                                    placeholder="语音链接或神秘代码 ..." @bind-Value="_newPost.AudioLink" />
                            </div>
                            <ValidationMessage For="() => _newPost.AudioLink" />
                            @if (!_newPost.ValidAudioLink)
                            {
                                <div class="validation-message ps-1">请填写语音地址</div>
                            }
                        </div>
                    </div>
                </div>
                <!-- Other Description -->
                <div class="mt-2">
                    <label class="fs-4 fw-bold mb-1" for="postOtherText">其他要求<i
                            class="bi bi-card-text mx-2"></i></label>
                    <div class="form-floating">
                        <InputTextArea class="form-control w-100 rounded-3" id="postOtherText"
                            placeholder="请简短描述 ..." @bind-Value="_newPost.Description" />
                        <label for="createOtherText">请简短描述 ...</label>
                    </div>
                </div>
            </EditForm>
            </div>
            <div class="modal-footer justify-content-end">
                @if(_createOnce && !_createSucceed)
                {
                    <div class="validation-message ms-2 me-auto">创建失败，请重试，谢谢茄子</div>                    
                }
                <div>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
					<button type="submit" class="btn btn-primary mx-1" form="newPostForm">创建</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? GameName { get; set; }

    private PostModel _newPost = default!;
    private EditContext? _editContext;

    private const int _searchResult = 5;
    private bool _existedGame = true;

    private bool _createOnce = false;
    private bool _createSucceed = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _newPost = new(_searchResult, GameService);

        _editContext = new(_newPost);
        _editContext.SetFieldCssClassProvider(new BootstrapValidationClassProvider());
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _newPost.GameName = GameName ?? string.Empty;

        _createOnce = false;
        _createSucceed = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        _newPost.MatchTypeList = (await PostService.GetMatchTypesAsync(_searchResult, _newPost.GameName)).ToArray();
        _newPost.AudioPlatformList = (await PostService.GetAudioPlatformsAsync(_searchResult)).ToArray();
    }

    private async void OnGameNameFocusAsync()
    {
        _newPost.MatchTypeList = (await PostService.GetMatchTypesAsync(_searchResult, _newPost.GameName)).ToArray();

        if (!string.IsNullOrWhiteSpace(_newPost.GameName))
        {
            _existedGame = await GameService.HasGameNameAsync(_newPost.GameName);
        }
    }

    private async void HandleValidSubmit()
    {
        if (!_existedGame)
        {
            _existedGame = await GameService.HasGameNameAsync(_newPost.GameName);
            if (!_existedGame)
            {
                await JS.InvokeVoidAsync("createGameAlert", _newPost.GameName);
                return;                
            }
        }

        var userLoginResult = await LocalStorage.GetAsync<int>(LoginService.LocalStorageKey);
        bool userHasLogin = userLoginResult.Success && await LoginService.UserHasLoginAsync(userLoginResult.Value);

        if (!userHasLogin)
        {
            await JS.InvokeVoidAsync("userLoginPostConfirm", Navigation.BaseUri + "login");
            return;
        }
        int userId = userLoginResult.Value;

        if (!_createOnce) _createOnce = true;

        (_createSucceed, int postId) = await PostService.CreateNewPostAsync(_newPost, userId);
        if (!_createSucceed)
        {
            await JS.InvokeVoidAsync("createPostAlert");
            return;
        }

        _createSucceed = await GameService.UpdateNewLatestPostDate(_newPost.GameName)
                      && await UserService.AddNewCreatePostAsync(userId, postId);
        if (!_createSucceed)
        {
            await JS.InvokeVoidAsync("updatePostAlert", _newPost.GameName);
            return;
        }

        // Reload the page
        Navigation.NavigateTo(Navigation.Uri, true);
    }
}