@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage

@inject ILoginService LoginService
@inject IUserService UserService
@inject IGameService GameService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="d-flex flex-column h-100">
    <div class="dropdown dropend text-center my-2">
        @if (!_userHasLogin)
        {
            <button class="dropdown-toggle link-secondary border-0 bg-transparent" type="button" data-bs-toggle="dropdown"
                aria-expanded="false">
                <img class="rounded-circle" src="@(UserService.DefaultUserIconUri)" alt="UserIcon" width="50" height="50">
            </button>
            <ul class="dropdown-menu text-small shadow">
                <li><a class="dropdown-item" href="login">登录</a></li>
                <li>
                    <hr class="dropdown-divider">
                </li>
                <li><a class="dropdown-item" href="register">注册</a></li>
            </ul>
        }
        else
        {
            <button class="dropdown-toggle link-secondary border-0 bg-transparent" type="button"
				data-bs-toggle="dropdown" aria-expanded="false">
                <img class="rounded-circle" src="@(_userIconURI ?? UserService.DefaultUserIconUri)"
                    alt="UserIcon" width="50" height="50">
            </button>
            <!--TODO: change button to a-->
            <ul class="dropdown-menu text-small shadow">
                <li><button class="dropdown-item" type="button">新帖子</button></li>
                <li><button class="dropdown-item" type="button">我的帖子</button></li>
                <li><button class="dropdown-item" type="button">个人信息</button></li>
                <li>
                    <hr class="dropdown-divider">
                </li>
                <li><button class="dropdown-item" type="button" @onclick="OnUserLogout">退出登录</button></li>
            </ul>
        }
    </div>

    <ul class="nav nav-pills flex-column flex-grow-1 mx-1 my-2">
        <li class="nav-item">
            <NavLink class="nav-link" href="games">游戏</NavLink>
        </li>
        @if (_gameNames is not null)
        {
            @foreach (var name in _gameNames)
            {
                <li class="nav-item">
                    <NavLink class="nav-link" href=@("teams/" + name)>@name</NavLink>
                </li>
            }
        }
        <li class="nav-item mt-auto">
            @if (_userHasLogin)
            {
                <NavLink class="nav-link" href="messages">消息</NavLink>
            }
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="login">设置</NavLink>
        </li>
    </ul>
    <hr>
    <a class="navbar-brand m-0" href="">
        <div class="fs-5 fw-bolder text-light-emphasis ms-2">Game<br>Fellowship</div>
    </a>
</div>

@code {
    private bool _userHasLogin = false;
    private string? _userIconURI;
    private IEnumerable<string>? _gameNames;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var userLoginResult = await SessionStorage.GetAsync<int>(LoginService.SessionStorageKey);
        _userHasLogin = userLoginResult.Success && LoginService.UserHasLogin(userLoginResult.Value);

        if (_userHasLogin)
        {
            _userIconURI = await UserService.GetUserIconURIAsync(userLoginResult.Value);

            IEnumerable<int> likedGames = await UserService.GetUserLikedGameIDsAsync(userLoginResult.Value);
            if (likedGames.Any())
            {
                _gameNames = await GameService.GetGameNamesAsync(likedGames);
            }

            StateHasChanged();
        }
    }

    private async Task OnUserLogout()
    {
        var userLoginResult = await SessionStorage.GetAsync<int>(LoginService.SessionStorageKey);

        bool logoutSucceed = userLoginResult.Success && LoginService.UserLogout(userLoginResult.Value);

        if (!logoutSucceed)
        {
            await JS.InvokeVoidAsync("userLogoutFailAlert");
            return;
        }
        await SessionStorage.DeleteAsync(LoginService.SessionStorageKey);

        Navigation.NavigateTo(Navigation.Uri, true);
    }
}