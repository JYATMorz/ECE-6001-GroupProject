@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage LocalStorage

@inject ILoginService LoginService
@inject IPostService PostService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="d-flex flex-column h-100">
    <!-- Title -->
    <div class="d-flex align-items-baseline gap-3 p-2 border-bottom border-dark-subtle">
        <div class="fs-4 fw-bold">@Post.Game.Name</div>
        <small class="text-muted">@Post.MatchType</small>
        <div class="border-start border-end border-dark-subtle px-2">
            <PersonIconsDiv Current="@Post.CurrentPeople" Remain="@(Post.TotalPeople - Post.CurrentPeople)" />
        </div>
        <div class="border border-success-subtle rounded-2 px-2">
            <i class="bi bi-calendar3 me-2"></i>
            @if (Post.PlayNow)
            {
                <span>立刻组队！</span>
            }
            else
            {
                <span>@(((DateTime)Post.StartDate!).ToShortDateString()) ~ @(((DateTime)Post.EndDate!).ToShortDateString())</span>
            }
        </div>
        <button class="btn btn-success rounded-3 ms-auto" type="button" data-bs-toggle="offcanvas"
            data-bs-target="#teamMemberOffcanvas" aria-controls="teamMemberOffcanvas">成员</button>
        <button class="btn btn-outline-danger rounded-3" type="button"
            @onclick="OnUserQuitAsync">退出</button>
    </div>
    <!-- Content -->
    <div class="d-flex flex-column flex-grow-1 gap-2 pe-2" style="min-height: 0;">
        <!-- Requirements -->
        <div>
            <div id="teamRequirementsMessage0" class="d-inline-flex flex-wrap gap-2 my-3">
                @foreach (var requirement in _requirements)
                {
                    <div class="px-2 rounded-4 bg-info-subtle">@requirement</div>
                }
            </div>
            <div>
                <textarea class="form-control w-100 rounded-3" name="teamDetailsMessage" id="teamDescriptionMessage0"
                    title="Team Requirements" disabled readonly style="resize: none; height: 100px;"
                    @bind=Post.Description></textarea>
            </div>
        </div>
        <!-- Chat Room -->
        <div class="d-flex flex-column flex-grow-1 flex-nowrap p-2 border border-dark-subtle rounded-2"
            style="min-height: 0;">
            <div class="flex-grow-1 overflow-y-scroll pe-1">
                @if (_conversations is not null && _conversations.Any())
                {
                    @foreach (var conversation in _conversations)
                    {
                        <ConversationBlock Content="@conversation" />
                    }
                }
            </div>
            <hr style="margin: 0.5rem 0;">
            <div class="d-flex gap-1">
                <textarea class="form-control rounded-3" name="chatMessageGroup1" id="chatMessageText1"
                    placeholder="发点不为空的消息？" style="resize: none; height: 100px;"
                    @bind="_conversationText"></textarea>
                <div class="d-inline-flex flex-column align-self-stretch justify-content-evenly">
                    <button class="btn btn-outline-primary text-nowrap" type="button"
                        @onclick="OnConversationSendAsync">发送</button>
					<button class="btn btn-outline-secondary text-nowrap" type="button"
                        @onclick="() => _conversationText = string.Empty">清空</button>
                </div>
            </div>
        </div>
        <!-- Audio Link -->
        <div class="d-flex justify-content-center align-items-baseline flex-wrap gap-2 mb-1">
            @if (Post.AudioChat)
            {
                <label class="form-label fs-6 fw-bold" for="audioChatNameMessage">语音<i
                    class="bi bi-mic-fill mx-2"></i></label>
                <input class="form-control form-control-sm form-control-plaintext" type="text" name="teamDetailsMessage"
                    id="audioChatNameMessage" @bind=Post.AudioPlatform style="width: 4rem;" readonly>
                <label class="form-label fs-5 fw-bold" for="audioChatLinkMessage"><i
                    class="bi bi-link-45deg mx-2"></i></label>
                <input class="form-control form-control-sm form-control-plaintext w-auto" type="text"
                    name="teamDetailsMessage" @bind=Post.AudioLink placeholder="Audio Link From User" readonly>
            }
            else
            {
                <small>不需要语音</small>
            }
        </div>
    </div>
</div>

<TeamMemberOffcanvas JoinedUserIDs="@_joinedUserIds" Total="@Post.TotalPeople" Current="@Post.CurrentPeople" />

@code {
    [Parameter]
    public Post Post { get; set; } = new();

    private string _conversationText = string.Empty;
    private int[] _joinedUserIds = Array.Empty<int>();
    private Conversation[] _conversations = Array.Empty<Conversation>();
    private string[] _requirements = Array.Empty<string>();

    protected override async Task OnParametersSetAsync()
    {
        _requirements = Post.Requirements.Split(PostService.DefaultConnectionSigns);
        _joinedUserIds = await PostService.GetJoinedUserIds(Post.Id);
        _conversations = await PostService.GetConversations(Post.Id);
    }

    private async void OnUserQuitAsync()
    {
        (bool userIsLogin, int userId) = await CheckUserLoginAsync();
        if (!userIsLogin)
        {
            await JS.InvokeVoidAsync("userLoginConfirm", Navigation.BaseUri + "login");
            return;
        }

        bool deleteSucceed = await PostService.DeleteCurrentUserAsync(Post.Id, userId);
        if (!deleteSucceed)
        {
            await JS.InvokeVoidAsync("updatePostAlert");
            return;
        }

        Navigation.NavigateTo("messages", true);
    }

    private async void OnConversationSendAsync()
    {
        if (string.IsNullOrWhiteSpace(_conversationText))
        {
            _conversationText = string.Empty;
            return;
        }

        (bool userIsLogin, int userId) = await CheckUserLoginAsync();
        if (!userIsLogin)
        {
            await JS.InvokeVoidAsync("userLoginConfirm", Navigation.BaseUri + "login");
            return;
        }

        ConversationModel newConversation = new(DateTime.Now, _conversationText, Post.Id, userId);
        if (!(await PostService.AddConversationAsync(newConversation)))
        {
            await JS.InvokeVoidAsync("updatePostAlert");
            return;
        }
        _conversationText = string.Empty;
    }

    private async Task<(bool, int)> CheckUserLoginAsync()
    {
        var userLoginResult = await LocalStorage.GetAsync<string>(LoginService.LocalStorageKey);
        if (!userLoginResult.Success)
        {
            return (false, -1);
        }

        (bool userHasLogin, int userId) = await LoginService.UserHasLoginAsync(userLoginResult.Value);
        if (!userHasLogin)
        {
            return (false, -1);
        }

        return (true, userId);
    }
}