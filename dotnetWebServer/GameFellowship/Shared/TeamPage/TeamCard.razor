@inject IUserService UserService

<div class="col mx-auto">
    <div class="card h-100" style="min-width: 18rem;">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-2">
                @if (!_userExist)
                {
                    <LoadingSpinner />
                    <div class="validation-message">用户已注销</div>
                }
                else
                {
                    <div class="fs-6">@(string.IsNullOrWhiteSpace(_userName) ? "加载中 ..." : _userName)</div>
                    <button class="btn border-0 dropdown-toggle bg-transparent" type="button" data-bs-toggle="dropdown"
                        aria-expanded="false">
                        <img class="rounded-circle" src="@(string.IsNullOrWhiteSpace(_userIconURI) ? UserService.DefaultUserIconUri : _userIconURI)"
                            alt="User" width="30" height="30">
                    </button>
                    <ul class="dropdown-menu text-small shadow">
                        <li><button class="dropdown-item" type="button">个人资料</button></li>
                        <li><button class="dropdown-item" type="button">私信</button></li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li><button class="dropdown-item" type="button">屏蔽</button></li>
                    </ul>
                }
            </div>
            <h4>@Post.MatchType
                @if (Post.AudioChat)
                {
                    <i class="bi bi-mic-fill ms-3"></i>
                }
                else
                {
                    <i class="bi bi-mic-mute-fill ms-3"></i>
                }
            </h4>
            <div class="px-2 my-2 d-inline-flex border border-1 border-primary-subtle rounded-4">
                <PersonIconsDiv Current="@Post.CurrentPeople" Remain="@(Post.TotalPeople - Post.CurrentPeople)" />
            </div>
            <div class="d-flex flex-wrap gap-1 my-2">
                @foreach (var requirement in _requirements)
                {
                    <div class="px-2 rounded-4 bg-info-subtle">@requirement</div>
                }
            </div>
            @if (Post.PlayNow)
            {
                <div class="card-text py-1 my-2">游戏时间:
                    <span class="fw-bold">现在</span>
                </div>
            }
            else
            {
                <div class="card-text py-1 my-2">游戏时间:
                    <span class="fw-bold">@(((DateTime)Post.StartDate!).ToShortDateString()) ~ @(((DateTime)Post.EndDate!).ToShortDateString())</span>
                </div>
            }
            <div class="card-text px-2 py-1 rounded-3 bg-dark-subtle">
                @Post.Description
            </div>
        </div>
        <div class="card-footer d-inline-flex justify-content-between align-items-center gap-3">
            <small class="text-muted">最后更新 @((DateTime.Now - Post.LastUpdate).TotalMinutes.ToString("F0")) 分钟前</small>
            <button type="button" class="btn btn-outline-primary p-1" data-bs-toggle="modal"
                data-bs-target="#teamInfoModal" @onclick="OnDetailCallback">详情</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Post Post { get; set; } = new();
    [Parameter]
    public EventCallback<MouseEventArgs> OnDetailCallback { get; set; }

    private bool _userExist = false;
    private string? _userName;
    private string? _userIconURI;
    private string[] _requirements = Array.Empty<string>();

    protected override async Task OnParametersSetAsync()
    {
        _userExist = await UserService.HasUserAsync(Post.Creator.Id);
        if (_userExist)
        {
            var (name, icon) = await UserService.GetUserNameIconPairAsync(Post.Creator.Id);
            _userName = name;
            _userIconURI = icon;
        }
        _requirements = Post.Requirements.Split(PostService.DefaultConnectionSigns);
    }
}




